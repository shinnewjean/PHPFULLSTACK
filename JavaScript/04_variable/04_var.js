// console.log("js 파일의 script : 안녕하심둥","두번째");

//--------------------------------------------------
// 변수
// (ctrl + / : 주석처리하기)
//--------------------------------------------------
// $name = "PHP식 이름 정의"

// var : 중복 선언 가능, 재할당 가능, 함수레벨 스코프
// var u_name  = "js식 이름 정의";
// var u_name  = "js식 이름 정의2"; //중복선언 가능 예시
// u_name =  "js식 이름 정의3"; //재할당 가능

// console.log( u_name );

// 요즘 변수 선언은 let을 사용합니다.
// let : 중복 선언 불가능,  재할당 가능, 블록레벨 스코프
// let u_age = 20;
//let u_age = 30; //중복 선언 불가능 : 이미 빨간줄이 그임 //html 에서도 두번 js가 사용되면 불가능
// u_age = 30; //재할당 가능


// 상수 : 상수(常數, constant)란 수식에서 변하지 않는 값을 뜻한다. 이것은 변하는 값 변수와 반대이다.
// const : 중복 선언 불가능,  재할당 불가능, 블록레벨 스코프
// const gender = "남자"; //처음 입력한 값 이외의 값은 무시
// gender = "여자"; //값을 재할당

//--------------------------------------------------
// 스코프(Scope) : 우리말로 번역하면 ‘범위’라는 뜻
//                 자바스크립트에선 스코프는 2가지 타입이 있습니다. 바로 global(전역)과 local(지역)
//--------------------------------------------------

// 전역 스코프(Global Scope)는 말 그대로 전역에 선언되어있어 어느 곳에서든지 해당 변수에 접근할 수 있다는 의미
// 지역 스코프(Local Scope)는 해당 지역에서만 접근할 수 있어 지역을 벗어난 곳에선 접근할 수 없다는 의미
// let 블록 레벨 // var 함수 레벨

// 전역 스코프
// 조심해서 사용(되도록이면 사용자제) : 어디에서든 사용이 가능 , 다시 선언하는 순간 에러발생 , 확실한 이름(어디서 사용하는지...)사용하는게 좋음
let u_name = "전역스코프";

// function test() {
//     console.log( u_name ); //전역스코프로 함수설정 한것임
// }


// 함수 레벨 스코프(Function-level scope) : 함수안에서만 사용하는 스코프
//                                         함수 내에서 선언된 변수는 함수 내에서만 유효하며 함수 외부에서는 참조할 수 없다. 즉, 함수 내부에서 선언한 변수는 지역 변수이며 함수 외부에서 선언한 변수는 모두 전역 변수이다.
function test() {
    console.log( u_name );
    let u_age = "함수 레벨 스코프";
    console.log( u_age ); //관리자 모드에서 u_age확인시 확인이 안됨
}
//관리자모드에서 test(); 입력할시 출력 : test(); <br> 전역스코프 <br> 함수 레벨 스코프


// 블록 레벨 스코프(Block-level scope) : {}를 블록
//                                      모든 코드 블록(함수, if 문, for 문, while 문, try/catch 문 등) 내에서 선언된 변수는 코드 블록 내에서만 유효하며 코드 블록 외부에서는 참조할 수 없다. 즉, 코드 블록 내부에서 선언한 변수는 지역 변수이다
function test1() {
    let v_test1 = "함수 : 테스트1"; //기본적인 변수 선언위치: 함수 제일 윗줄(오류를 방지하기위해 : 자식블록에 모두 적용되기 때문)
    if ( true ) {
        // let v_test1 = "함수 : 테스트1";
        var v_var1 = "var로 선언";
        
        console.log(v_test1); //같은 블록안에 있기때문에 출력가능
    }
    //관리자모드에서 test1(); 입력할시 출력 :
    // console.log(v_test1); //let으로 선언(에러 발생)
    console.log(v_var1); //var로 선언(에러 발생안함)
}

//--------------------------------------------------
// 호이스팅(hoisting)이란, 인터프리터가 변수와 함수의 메모리 공간을 선언 전에 미리 할당하는 것을 의미합니다. var 로 선언한 변수의 경우 호이스팅 시 undefined 로 변수를 초기화합니다
// (인터프리터 : 프로그래밍 언어의 소스 코드를 바로 실행하는 컴퓨터 프로그램 또는 환경)
// 코드가 실행되기 전에 변수와 함수를 최상단에 끌어 올려지는것
//--------------------------------------------------

console.log(hTest());
// console.log("78 line : " + varTest);
// console.log("79 line : " + letTest);
// console.log("80 line : " + constTest);

function hTest() {
    return "함수 : hTest"
}

var varTest = "var : var 변수";

let letTest = "let : let 변수";

const constTest = "const : const 상수";

